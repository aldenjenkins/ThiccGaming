version: "2"

volumes:
    prometheus_data: {}
    grafana_data: {}

services:
  nginx:
    restart: always
    # build: ./nginx/
    # image: nginx:1.13
    image: jwilder/nginx-proxy
    container_name: nginx
    env_file: ./nginx/environment.env
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      # - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/passwords:/etc/nginx/htpasswd
    ports:
      - 80:80
    networks:
      - nginx_network

  django:
    restart: always
    build: ./site/
    container_name: django
    env_file: ./site/environment.env
    stdin_open: true
    tty: true
    environment:
      - VIRTUAL_HOST=${WEB_DOMAIN}
      - VIRTUAL_PORT=8000
    volumes:
      - ./site/:/opt/services/thiccsite/src
    depends_on: 
     - mysql-site
     - nginx
    networks:
     - nginx_network
     - mysql_network
     - redis_network
    command: gunicorn -b :8000 --reload thicc.wsgi:application

  celery:
    restart: always
    container_name: celery
    build: ./site
    env_file: ./site/environment.env
    volumes:
      - ./site/:/opt/services/thiccsite/src
    depends_on: 
     - mysql-site
     - redis
    networks:
     - mysql_network
     - redis_network
    command: celery -E -A thicc.celery_tasks worker -B --loglevel=debug 

  flower:
    restart: always
    container_name: flower
    build: ./site
    env_file: ./site/environment.env
    ports:
      - 5555:5555
    volumes:
     - ./site/:/opt/services/thiccsite/src
    environment:
      - VIRTUAL_HOST=${FLOWER_SUBDOMAIN}.${WEB_DOMAIN}
      - VIRTUAL_PORT=5555
    depends_on: 
     - nginx
     - mysql-site
     - redis
    networks:
     - nginx_network
     - mysql_network
     - redis_network
    command: celery flower -A thicc.celery_tasks --loglevel=info --persistent=True  --broker_api=redis://redis:6379/0


  redis:
    restart: always
    container_name: redis
    image: "redis:latest"
    # volumes:
      #- ./redis/redis.conf:/var/lib/redis/redis.conf
      # image: "deadtrickster/redis_prometheus"
    networks:
     - redis_network

  redis-exporter:
    restart: always
    container_name: redis-exporter
    environment:
      - REDIS_ADDR=redis://redis:6379
    image:
      "oliver006/redis_exporter"
    networks:
     - prometheus_network
     - redis_network

 #redis:
 #  restart: always
 #  container_name: redis
 #  env_file: ./redis/environment.env
 #  environment:
 #    - VIRTUAL_HOST=redis.localhost
 #    - VIRTUAL_PORT=15672
 #  image: "redis:3-management"
 #  volumes:
 #    - ./redis/redis.conf:/var/lib/redis/redis.conf
 #  # image: "deadtrickster/redis_prometheus"
 #  networks:
 #   - redis_network

  mysql-site:
    restart: always
    container_name: mysql-site
    image: mysql:5.7.19
    volumes:
      - /opt/services/sitedb/:/var/lib/mysql
    env_file:
      - ./mysql/thiccsite/environment.env
    networks:
      - mysql_network

  # l4d2:
  # build: ./game-servers/l4d2
  # depends_on:
  #   - mysql-site
  # volumes:
  #   - ./game-servers/l4d2/addons:/opt/l4d2/left4dead2/addons
  #   - ./game-servers/l4d2/cfg:/opt/l4d2/left4dead2/cfg
  #   - ./game-servers/l4d2/steam_appid.txt:/opt/l4d2/steam_appid.txt
  #   - ./game-servers/l4d2/host.txt:/opt/l4d2/left4dead2/host.txt
  #   - ./game-servers/l4d2/motd.txt:/opt/l4d2/left4dead2/motd.txt
  # restart: always
  # ports:
  #   - "27000-27050:27000-27050/udp"
  #   - "27000-27050:27000-27050"
  # networks:
  #   - mysql_network
  # command: /opt/l4d2/srcds_run -game left4dead2 -secure -console -usercon -ip 0.0.0.0 

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    environment:
     - PMA_ARBITRARY=1
    restart: always
    volumes:
     - /sessions
    environment:
      - VIRTUAL_HOST=${MYADMIN_SUBDOMAIN}.${WEB_DOMAIN}
      - VIRTUAL_PORT=8080
    depends_on: 
     - nginx
     - mysql-site
    networks:
     - nginx_network
     - mysql_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    environment:
      - VIRTUAL_HOST=${PROMETHEUS_SUBDOMAIN}.${WEB_DOMAIN}
      - VIRTUAL_PORT=8080
    command:
      # Use the prometheus.yml located in ./prometheus
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--log.level=debug'
    depends_on:
      - node-exporter
      - alertmanager
      - cadvisor
      - nginx
      - redis-exporter
      - mysql-exporter
    networks:
      - nginx_network
      - prometheus_network
    restart: always

  mysql-exporter:
    image: prom/mysqld-exporter
    container_name: mysql-exporter
    env_file: ./mysqld-exporter/environment.env
    environment:
      - VIRTUAL_HOST=mysqlexporter.localhost
      - VIRTUAL_PORT=9104
    depends_on:
      - nginx
      - mysql-site
    networks:
      - nginx_network
      - mysql_network
      - prometheus_network
    restart: always

  node-exporter:
    image: prom/node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command: 
      - '--path.procfs=/host/proc' 
      - '--path.sysfs=/host/sys'
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    networks:
      - prometheus_network
    restart: always

  alertmanager:
    image: prom/alertmanager
    container_name: alertmanager
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    environment:
      - VIRTUAL_HOST=${ALERTMANAGER_SUBDOMAIN}.${WEB_DOMAIN}
      - VIRTUAL_PORT=9093
    networks:
      - prometheus_network
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'

  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - prometheus_network
    restart: always

  grafana:
    image: grafana/grafana
    container_name: grafana
    user: "1000"
    environment:
      - VIRTUAL_HOST=${GRAFANA_SUBDOMAIN}.${WEB_DOMAIN}
      - VIRTUAL_PORT=3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    depends_on:
      - nginx
      - prometheus
    networks:
      - nginx_network
      - prometheus_network
    restart: always

networks:
  nginx_network:
    driver: bridge
  mysql_network:
    driver: bridge
  # mysql2_network:
  # driver: bridge
  redis_network:
    driver: bridge
  prometheus_network:
    driver: bridge

